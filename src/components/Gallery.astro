---
interface Props {
    projectId?: string;
}
const { projectId } = Astro.props

import { getCollection } from "astro:content";

const allProjects = await getCollection("projects");
const relatedProjects = await getCollection('projects', ({ id }) => {
    return id !== projectId
});
//@ts-ignore
const newestToOldestProjects = allProjects.sort((a, b) => Date.parse(a.data.sortOrder) - Date.parse(b.data.sortOrder));
//@ts-ignore
const newestToOldestRelatedProjects = relatedProjects.sort((a, b) => Date.parse(a.data.sortOrder) - Date.parse(b.data.sortOrder));
---

{projectId == null ? (
    <div class="grid" id="gallery">
        {newestToOldestProjects.map((project) =>
            <a href={`/projects/${project.slug}/`}>
                <video src={project.data.video.desktopUrl} autoplay muted loop playsinline></video>
            </a>
        )}
    </div>
) : (
    <div class="grid" id="gallery" data-type='related'>
        {newestToOldestRelatedProjects.slice(0,6).map((project) =>
            <a href={`/projects/${project.slug}/`}>
                <video src={project.data.video.desktopUrl} autoplay muted loop playsinline class="gallery-video"></video>
            </a>
        )}
    </div>
)}

<style>
    .grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;

        @media (width > 431px) {
            grid-template-columns: repeat(2, 1fr);
        }

        @media (width > 1024px) {
            grid-template-columns: repeat(3, 1fr);
        }

        >a {
            transition: var(--transition);

            &:hover {
                transform: translateY(-5px) !important;
            }

            >video {
                width: 100%;
                border: 1px solid var(--purple);
            }
        }
    }
</style>

<style is:global>
    .project-image {
        width: 100%;
        object-fit: cover;
        object-position: center;
        border: 1px solid var(--purple);
        height: 100%;
    }

    .extra-image-box {
        display: none;

        @media (width > 431px) {
            display: block;
        }
    }
</style>

<script>
    //@ts-nocheck
    const gallery = document.getElementById('gallery')

    function addExtraImage() {
        if (gallery.dataset.type != undefined) {
            const projectVideoWidth = document.querySelector('.gallery-video').getBoundingClientRect().width
            const projectVideoHeight = document.querySelector('.gallery-video').getBoundingClientRect().height
        
            const extraImage = document.createElement('div');
            extraImage.className = 'extra-image-box'
            extraImage.innerHTML = '<img src="/gifs/kyle.webp" alt="kyle using computer" class="project-image">'
            extraImage.style.width = projectVideoWidth + 'px'
            extraImage.style.height = projectVideoHeight + 'px'
        
            gallery.appendChild(extraImage)
        }
    }


    //
    //Animations
    //

    const mobileQuery = window.matchMedia('(max-width: 431px)')

    function galleryAnimation() {
        if (mobileQuery.matches) {
            let tl = gsap.timeline({
                scrollTrigger: {
                    trigger: "#gallery",
                    start: "top bottom",
                    end: "bottom bottom",
                    scrub: true,
                    id: "scrub"
                },
                defaults: {ease:"expo.out"} 
            })
    
            tl.fromTo('#gallery > *', {x:-200, opacity: 0}, {x:0, opacity: 1, stagger: .5})
        }
    
        else {
            let tl = gsap.timeline({
                scrollTrigger: {
                    trigger: "#gallery",
                    start: "10% 80%"
                }
            })
            
            tl.fromTo('#gallery > * > *', {y:-100, opacity: 0}, {y:0, opacity: 1, duration: 2.5, ease: 'power4.out'})
        }
    }

    // only add function if uneven
    // addExtraImage()
    galleryAnimation()
</script>